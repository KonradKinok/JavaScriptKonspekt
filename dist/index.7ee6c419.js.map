{"mappings":"AAAA;AAEA,UAAU;AACV,MAAM,cAAc;IAClB,QAAQ;QAAC;QAAe;QAAU;KAAa;IAC/C,YAAW,SAAS;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;IAC9B;IACA,OAAM,SAAS;QACb,MAAM,mBAAmB,IAAI,CAAC,UAAU,CAAC;QAEzC,IAAI,CAAC,kBACH,OAAO,CAAC,mCAAgC,EAAE,UAAU,IAAC,CAAC;QAGxD,OAAO,CAAC,8BAA2B,EAAE,UAAU,UAAO,CAAC;IACzD;AACF;AACA,gDAAgD;AAEhD,UAAU;AACV,MAAM,WAAW;IACf,UAAU;IACV,SAAS;IACT,UAAU;IACV,QAAQ;QAAC;QAAU;QAAS;KAAQ;IACpC;QACE,OAAO,IAAI,CAAC,OAAO;IACrB;IACA;QACE,OAAO,IAAI,CAAC,QAAQ;IACtB;IACA,aAAY,KAAK;QACf,IAAI,CAAC,QAAQ,GAAG;IAClB;IACA;QACE,OAAO,IAAI,CAAC,MAAM;IACpB;IACA,UAAS,IAAI,EAAE,KAAK;QAClB,IAAI,CAAC,OAAO,IAAI,OAAO,OAAO,IAAI,CAAC,QAAQ;QAC3C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IACnB;AACF;AAEA,8BAA8B;AAC9B,+CAA+C;AAC/C,oCAAoC;AACpC,+CAA+C;AAC/C,8EAA8E;AAE9E,UAAU;AACV,MAAM,iBAAiB;IACrB,QAAQ;QACN;YAAE,OAAO;YAAqB,MAAM;QAAU;QAC9C;YAAE,OAAO;YAAuB,MAAM;QAAS;QAC/C;YAAE,OAAO;YAAwB,MAAM;QAAQ;QAC/C;YAAE,OAAO;YAAuB,MAAM;QAAY;QAClD;YAAE,OAAO;YAAqB,MAAM;QAAO;KAC5C;IACD;QACE,OAAO,IAAI,CAAC,MAAM,CACf,GAAG,CAAC,CAAA,QAAS,CAAC,OAAO,EAAE,MAAM,KAAK,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,CAAC,EACxD,IAAI,CAAC;IACV;IACA;QACE,MAAM,SAAS,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA,QAAS,MAAM,KAAK;QACnD,MAAM,eAAe,IAAI,IAAI;QAC7B,OAAO;eAAI;SAAa;IAC1B;IACA,kBAAiB,KAAK;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA,QAAS,MAAM,KAAK,KAAK;IACrD;AACF;AACA,6CAA6C;AAC7C,0CAA0C;AAC1C,gLAAgL;AAEhL,eAAe;AACf,MAAM,SAAS;IACb,MAAM;IACN,SAAS;IACT,KAAK;IACL,UAAU;AACZ;AACA,MAAM,QAAQ,OAAO,MAAM,CAAC;AAC5B,MAAM,IAAI,GAAG;AACb,MAAM,GAAG,GAAG;AACZ,QAAQ,GAAG,CAAC,QAAQ;AACpB,QAAQ,GAAG,CAAC,CAAC,kCAAkC,EAAE,OAAO,aAAa,CAAC,OAAO,CAAC;AAE9E,eAAe;AACf,MAAM,WAAW;IACf,MAAM;IACN,KAAK;IACL,SAAS;IACT,UAAU;AACZ;AACA,MAAM,UAAU,OAAO,MAAM,CAAC;AAC9B,OAAO,IAAI,GAAG;AACd,OAAO,OAAO,GAAG;AACjB,OAAO,GAAG,GAAG;AAEb,MAAM,QAAQ,OAAO,MAAM,CAAC;AAC5B,MAAM,IAAI,GAAG;AACb,MAAM,GAAG,GAAG;AAEZ,sBAAsB;AACtB,MAAM;AAAK","sources":["src/scripts/10.mjs"],"sourcesContent":["'use strict';\r\n\r\n//01. this\r\nconst pizzaPalace = {\r\n  pizzas: ['Supercheese', 'Smoked', 'Four meats'],\r\n  checkPizza(pizzaName) {\r\n    return this.pizzas.includes(pizzaName);\r\n  },\r\n  order(pizzaName) {\r\n    const isPizzaAvailable = this.checkPizza(pizzaName);\r\n\r\n    if (!isPizzaAvailable) {\r\n      return `Sorry, there is no pizza named «${pizzaName}»`;\r\n    }\r\n\r\n    return `Order accepted, preparing «${pizzaName}» pizza`;\r\n  },\r\n};\r\n// console.log(pizzaPalace.order('Four meats'));\r\n\r\n//02. this\r\nconst customer = {\r\n  username: 'Mango',\r\n  balance: 24000,\r\n  discount: 0.1,\r\n  orders: ['Burger', 'Pizza', 'Salad'],\r\n  getBalance() {\r\n    return this.balance;\r\n  },\r\n  getDiscount() {\r\n    return this.discount;\r\n  },\r\n  setDiscount(value) {\r\n    this.discount = value;\r\n  },\r\n  getOrders() {\r\n    return this.orders;\r\n  },\r\n  addOrder(cost, order) {\r\n    this.balance -= cost - cost * this.discount;\r\n    this.orders.push(order);\r\n  },\r\n};\r\n\r\n// customer.setDiscount(0.15);\r\n// console.log(customer.getDiscount()); // 0.15\r\n// customer.addOrder(5000, 'Steak');\r\n// console.log(customer.getBalance()); // 19750\r\n// console.log(customer.getOrders()); // [\"Burger\", \"Pizza\", \"Salad\", \"Steak\"]\r\n\r\n//03. this\r\nconst historyService = {\r\n  orders: [\r\n    { email: 'jacob@hotmail.com', dish: 'Burrito' },\r\n    { email: 'solomon@topmail.net', dish: 'Burger' },\r\n    { email: 'artemis@coldmail.net', dish: 'Pizza' },\r\n    { email: 'solomon@topmail.net', dish: 'Apple pie' },\r\n    { email: 'jacob@hotmail.com', dish: 'Taco' },\r\n  ],\r\n  getOrdersLog() {\r\n    return this.orders\r\n      .map(order => `email: ${order.email} dish: ${order.dish}`)\r\n      .join(' - ');\r\n  },\r\n  getEmails() {\r\n    const emails = this.orders.map(order => order.email);\r\n    const uniqueEmails = new Set(emails);\r\n    return [...uniqueEmails];\r\n  },\r\n  getOrdersByEmail(email) {\r\n    return this.orders.filter(order => order.email === email);\r\n  },\r\n};\r\n//console.log(historyService.getOrdersLog());\r\n//console.log(historyService.getEmails());\r\n//console.log(historyService.getOrdersByEmail('solomon@topmail.net')); //[{ email: \"solomon@topmail.net\", dish: \"Burger\" }, { email: \"solomon@topmail.net\", dish: \"Apple pie\" }]\r\n\r\n//04. prototype\r\nconst parent = {\r\n  name: 'Stacey',\r\n  surname: 'Moore',\r\n  age: 54,\r\n  heritage: 'Irish',\r\n};\r\nconst child = Object.create(parent);\r\nchild.name = 'Jason';\r\nchild.age = 27;\r\nconsole.log(parent, child);\r\nconsole.log(`Czy parent jest prototypem child: ${parent.isPrototypeOf(child)}`);\r\n\r\n//05. prototype\r\nconst ancestor = {\r\n  name: 'Paul',\r\n  age: 83,\r\n  surname: 'Dawson',\r\n  heritage: 'Irish',\r\n};\r\nconst parent5 = Object.create(ancestor);\r\nparent.name = 'Stacey';\r\nparent.surname = 'Moore';\r\nparent.age = 54;\r\n\r\nconst child = Object.create(parent5);\r\nchild.name = 'Jason';\r\nchild.age = 27;\r\n\r\n//06. deklaracja klasa\r\nclass Car {}\r\n"],"names":[],"version":3,"file":"index.7ee6c419.js.map","sourceRoot":"/__parcel_source_root/"}