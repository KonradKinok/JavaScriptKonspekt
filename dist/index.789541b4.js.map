{"mappings":"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","sources":["src/scripts/08.mjs"],"sourcesContent":["'use strict';\r\n\r\n// const planets = ['Ziemia', 'Mars', 'Wenus', 'Jowisz'];\r\n\r\n// const planetsInUpperCase = planets.map(planet => planet.toUpperCase());\r\n// console.log(planetsInUpperCase); // ['ZIEMIA', 'MARS', 'WENUS', 'JOWISZ']\r\n\r\n// const planetsInLowerCase = planets.map(planet => planet.toLowerCase());\r\n// console.log(planetsInLowerCase); // ['ziemia', 'mars', 'wenus', 'jowisz']\r\n\r\n// // Oryginalna tablica się nie zmieniła\r\n// console.log(planets); // ['Ziemia', 'Mars', 'Wenus', 'Jowisz']\r\n\r\n// Filtrowanie unikalnych elementów\r\nconst students = [\r\n  { name: 'Mango', courses: ['matematyka', 'fizyka'] },\r\n  { name: 'Poly', courses: ['informatyka', 'matematyka'] },\r\n  { name: 'Kiwi', courses: ['fizyka', 'biologia'] },\r\n];\r\n\r\nconst allCourses = students.flatMap(student => student.courses);\r\n// ['matematyka', 'fizyka', 'informatyka', 'matematyka', 'fizyka', 'biologia'];\r\n\r\nconst uniqueCourses = allCourses.filter(\r\n  (course, index, array) => array.indexOf(course) === index\r\n);\r\n\r\n// console.log(uniqueCourses);\r\n\r\n// Metoda find()\r\nconst colorPickerOptions = [\r\n  { label: 'red', color: '#F44336' },\r\n  { label: 'green', color: '#4CAF50' },\r\n  { label: 'blue', color: '#2196F3' },\r\n  { label: 'pink', color: '#E91E63' },\r\n  { label: 'indigo', color: '#3F51B5' },\r\n];\r\n\r\nconst foundColor = colorPickerOptions.find(option => option.label === 'blue'); // { label: 'blue', color: '#2196F3' }\r\n// console.log(\r\n//   `Obiekt: ${foundColor} Nazwa koloru: ${foundColor.label} Hash koloru: ${foundColor.color}`\r\n// );\r\n\r\n// 01. Funkcja do zmiennej\r\nfunction makePizza() {\r\n  return 'Your pizza is being prepared, please wait.';\r\n}\r\n\r\nconst result = makePizza();\r\nconst pointer = makePizza;\r\n\r\n//02. Funkcja zwrotna (callback)\r\nfunction deliverPizza(pizzaName) {\r\n  return `Delivering ${pizzaName} pizza.`;\r\n}\r\n\r\nfunction makePizza02(pizzaName) {\r\n  return `Pizza ${pizzaName} is being prepared, please wait...`;\r\n}\r\n\r\n// Chande code below this line\r\nfunction makeMessage(pizzaName, callback) {\r\n  return callback(pizzaName);\r\n}\r\n\r\n// console.log(makeMessage('Royal Grand', makePizza02));\r\n\r\n//03. Funkcja callback zadeklarowana bezpośrednio przy wywołaniu funkcji\r\nfunction makePizza03(pizzaName, callback) {\r\n  console.log(`Pizza ${pizzaName} is being prepared, please wait...`);\r\n  callback(pizzaName);\r\n}\r\n\r\n// makePizza03('Royal Grand', function deliverPizza(pizzaName) {\r\n//   console.log(`Delivering pizza ${pizzaName}.`);\r\n// });\r\n\r\n// makePizza03('Ultracheese', function eatPizza(pizzaName) {\r\n//   console.log(`Eating pizza ${pizzaName}.`);\r\n// });\r\n\r\n//04. Funkcja callback dowolna ilość callbacków\r\nconst pizzaPalace = {\r\n  pizzas: ['Ultracheese', 'Smoked', 'Four meats'],\r\n  order(pizzaName, onSuccess, onError) {\r\n    const nameOfPizza = this.pizzas.some(tableItem => tableItem === pizzaName);\r\n\r\n    if (nameOfPizza) {\r\n      return onSuccess(pizzaName);\r\n    } else {\r\n      return onError(\r\n        `There is no pizza with a name ${pizzaName} in the assortment.`\r\n      );\r\n    }\r\n  },\r\n};\r\n\r\n// Callback for onSuccess\r\nfunction makePizza04(pizzaName) {\r\n  return `Your order is accepted. Cooking pizza ${pizzaName}.`;\r\n}\r\n\r\n// Callback for onError\r\nfunction onOrderError(error) {\r\n  return `Error! ${error}`;\r\n}\r\n\r\n// Method calls with callbacks\r\n// console.log(pizzaPalace.order('Smoked', makePizza04, onOrderError));\r\n// console.log(pizzaPalace.order('Vienna', makePizza, onOrderError));\r\n\r\n//05. Pętla forEach\r\nfunction calculateTotalPrice(orderedItems) {\r\n  let totalPrice = 0;\r\n\r\n  orderedItems.forEach(function (number) {\r\n    totalPrice += number;\r\n  });\r\n\r\n  return totalPrice;\r\n}\r\n// console.log(calculateTotalPrice([12, 85, 37, 4]));\r\n\r\n//06. Pętla forEach - filtrowanie danych\r\nfunction filterArray(numbers, value) {\r\n  const filteredNumbers = [];\r\n\r\n  numbers.forEach(function (number) {\r\n    if (number > value) {\r\n      filteredNumbers.push(number);\r\n    }\r\n  });\r\n\r\n  return filteredNumbers;\r\n}\r\n// console.log(filterArray([1, 2, 3, 4, 5], 3));\r\n\r\n//07. Pętla forEach - filtrowanie danych\r\nfunction getCommonElements(firstArray, secondArray) {\r\n  const commonElements = [];\r\n  firstArray.forEach(function (number) {\r\n    if (secondArray.includes(number)) {\r\n      commonElements.push(number);\r\n    }\r\n  });\r\n  return commonElements;\r\n}\r\n// console.log(getCommonElements([24, 12, 27, 3], [12, 8, 3, 36, 27]));\r\n\r\n//08. Funkcja strzałkowa\r\nconst calculateTotalPrice08 = (quantity, pricePerItem) => {\r\n  return quantity * pricePerItem;\r\n};\r\n\r\n//09. Funkcja strzałkowa - niejawny zwrot\r\nconst calculateTotalPrice09 = (quantity, pricePerItem) =>\r\n  quantity * pricePerItem;\r\n\r\n//10. Funkcja strzałkowa - metoda foreach\r\nconst calculateTotalPrice10 = orderedItems => {\r\n  let totalPrice = 0;\r\n\r\n  orderedItems.forEach(item => {\r\n    totalPrice += item;\r\n  });\r\n\r\n  return totalPrice;\r\n};\r\n// console.log(calculateTotalPrice10([412, 371, 94, 63, 176]));\r\n\r\n//11. Funkcja strzałkowa - Filtrowanie tablicy liczb\r\nconst filterArray11 = (numbers, value) => {\r\n  const filteredNumbers = [];\r\n\r\n  numbers.forEach(number => {\r\n    if (number > value) {\r\n      filteredNumbers.push(number);\r\n    }\r\n  });\r\n\r\n  return filteredNumbers;\r\n};\r\n// console.log(filterArray11([12, 24, 8, 41, 76], 38));\r\n\r\n//12. Funkcja strzałkowa - Wspólne elementy\r\nconst getCommonElements12 = (firstArray, secondArray) => {\r\n  const commonElements = [];\r\n\r\n  firstArray.forEach(element => {\r\n    if (secondArray.includes(element)) {\r\n      commonElements.push(element);\r\n    }\r\n  });\r\n\r\n  return commonElements;\r\n};\r\n// console.log(getCommonElements12([10, 20, 30, 40], [4, 30, 17, 10, 40]));\r\n\r\n//13. Funkcja z efektami ubocznymi\r\nfunction changeEven(numbers, value) {\r\n  // Change code below this line\r\n  const commonElements = [];\r\n\r\n  numbers.forEach(element => {\r\n    if (element % 2 === 0) {\r\n      commonElements.push(element + value);\r\n    } else {\r\n      commonElements.push(element);\r\n    }\r\n  });\r\n  return commonElements;\r\n}\r\n// console.log(changeEven([2, 8, 3, 7, 4, 6], 10)); //[12, 18, 3, 7, 14, 16]\r\n\r\n//14. Metoda map().\r\nconst planets = ['Earth', 'Mars', 'Venus', 'Jupiter'];\r\n\r\nconst planetsLengths = planets.map(planet => planet.length);\r\n// console.log(planetsLengths);\r\n\r\n//15. Metoda map().\r\nconst books = [\r\n  {\r\n    title: 'The Last Kingdom',\r\n    author: 'Bernard Cornwell',\r\n    rating: 8.38,\r\n  },\r\n  {\r\n    title: 'Beside Still Waters',\r\n    author: 'Robert Sheckley',\r\n    rating: 8.51,\r\n  },\r\n  {\r\n    title: 'The Dream of a Ridiculous Man',\r\n    author: 'Fyodor Dostoevsky',\r\n    rating: 7.75,\r\n  },\r\n  { title: 'Redder Than Blood', author: 'Tanith Lee', rating: 7.94 },\r\n  { title: 'Enemy of God', author: 'Bernard Cornwell', rating: 8.67 },\r\n];\r\n// Change code below this line\r\n\r\nconst titles = books.map(book => book.title);\r\n// console.log(titles);\r\n\r\n//16. Metoda flatMap().\r\nconst books16 = [\r\n  {\r\n    title: 'The Last Kingdom',\r\n    author: 'Bernard Cornwell',\r\n    genres: ['adventure', 'history'],\r\n  },\r\n  {\r\n    title: 'Beside Still Waters',\r\n    author: 'Robert Sheckley',\r\n    genres: ['fiction'],\r\n  },\r\n  {\r\n    title: 'Redder Than Blood',\r\n    author: 'Tanith Lee',\r\n    genres: ['horror', 'mysticism'],\r\n  },\r\n];\r\n\r\nconst genres = books16.flatMap(book => book.genres);\r\n// console.log(genres);\r\n\r\n//17. 18. Metoda map() 22. 23. 24.Metoda filter() 25. Metoda flatMap() filter() 26. 27. Metoda filter() 29. Metoda find() 31. Metoda every() 33. Metoda some() 36. 37. Metoda reduce(callback, initialValue) - obiekt\r\nconst users = [\r\n  {\r\n    name: 'Moore Hensley',\r\n    email: 'moorehensley@indexia.com',\r\n    eyeColor: 'blue',\r\n    friends: ['Sharron Pace'],\r\n    isActive: false,\r\n    balance: 2811,\r\n    skills: ['ipsum', 'lorem'],\r\n    gender: 'male',\r\n    age: 37,\r\n  },\r\n  {\r\n    name: 'Sharlene Bush',\r\n    email: 'sharlenebush@tubesys.com',\r\n    eyeColor: 'blue',\r\n    friends: ['Briana Decker', 'Sharron Pace'],\r\n    isActive: true,\r\n    balance: 3821,\r\n    skills: ['tempor', 'mollit', 'commodo', 'veniam', 'laborum'],\r\n    gender: 'female',\r\n    age: 34,\r\n  },\r\n  {\r\n    name: 'Ross Vazquez',\r\n    email: 'rossvazquez@xinware.com',\r\n    eyeColor: 'green',\r\n    friends: ['Marilyn Mcintosh', 'Padilla Garrison', 'Naomi Buckner'],\r\n    isActive: false,\r\n    balance: 3793,\r\n    skills: ['nulla', 'anim', 'proident', 'ipsum', 'elit'],\r\n    gender: 'male',\r\n    age: 24,\r\n  },\r\n  {\r\n    name: 'Elma Head',\r\n    email: 'elmahead@omatom.com',\r\n    eyeColor: 'green',\r\n    friends: ['Goldie Gentry', 'Aisha Tran'],\r\n    isActive: true,\r\n    balance: 2278,\r\n    skills: ['adipisicing', 'irure', 'velit'],\r\n    gender: 'female',\r\n    age: 21,\r\n  },\r\n  {\r\n    name: 'Carey Barr',\r\n    email: 'careybarr@nurali.com',\r\n    eyeColor: 'blue',\r\n    friends: ['Jordan Sampson', 'Eddie Strong'],\r\n    isActive: true,\r\n    balance: 3951,\r\n    skills: ['ex', 'culpa', 'nostrud'],\r\n    gender: 'male',\r\n    age: 27,\r\n  },\r\n  {\r\n    name: 'Blackburn Dotson',\r\n    email: 'blackburndotson@furnigeer.com',\r\n    eyeColor: 'brown',\r\n    friends: ['Jacklyn Lucas', 'Linda Chapman'],\r\n    isActive: false,\r\n    balance: 1498,\r\n    skills: ['non', 'amet', 'ipsum'],\r\n    gender: 'male',\r\n    age: 38,\r\n  },\r\n  {\r\n    name: 'Sheree Anthony',\r\n    email: 'shereeanthony@kog.com',\r\n    eyeColor: 'brown',\r\n    friends: ['Goldie Gentry', 'Briana Decker'],\r\n    isActive: true,\r\n    balance: 2764,\r\n    skills: ['lorem', 'veniam', 'culpa'],\r\n    gender: 'female',\r\n    age: 39,\r\n  },\r\n];\r\n\r\n//17. Metoda map().\r\nconst getUserNames = users => {\r\n  const usersName = users.map(user => user.name);\r\n  return usersName;\r\n};\r\n\r\n// console.log(getUserNames(users));\r\n\r\n//18. Metoda map().\r\nconst getUserEmails = users => {\r\n  const usersEmails = users.map(user => user.email);\r\n  return usersEmails;\r\n};\r\n\r\n// console.log(getUserEmails(users));\r\n\r\n//19. Metoda filter().\r\nconst numbers = [17, 24, 82, 61, 36, 18, 47, 52, 73];\r\n// Change code below this line\r\n\r\nconst evenNumbers = numbers.filter(value => value % 2 === 0);\r\nconst oddNumbers = numbers.filter(value => value % 2 !== 0);\r\n\r\n// console.log(evenNumbers, oddNumbers);\r\n\r\n//20. Metoda flatMap() filter().\r\nconst books20 = [\r\n  {\r\n    title: 'The Last Kingdom',\r\n    author: 'Bernard Cornwell',\r\n    genres: ['adventure', 'history'],\r\n  },\r\n  {\r\n    title: 'Beside Still Waters',\r\n    author: 'Robert Sheckley',\r\n    genres: ['fiction', 'mysticism'],\r\n  },\r\n  {\r\n    title: 'Redder Than Blood',\r\n    author: 'Tanith Lee',\r\n    genres: ['horror', 'mysticism', 'adventure'],\r\n  },\r\n];\r\nconst allGenres = books20.flatMap(book => book.genres);\r\nconst uniqueGenres = allGenres.filter(\r\n  (genre, index, array) => array.indexOf(genre) === index\r\n);\r\n// console.log(allGenres, uniqueGenres);\r\n\r\n//21. Metoda filter().\r\nconst books21 = [\r\n  {\r\n    title: 'The Last Kingdom',\r\n    author: 'Bernard Cornwell',\r\n    rating: 8.38,\r\n  },\r\n  {\r\n    title: 'Beside Still Waters',\r\n    author: 'Robert Sheckley',\r\n    rating: 8.51,\r\n  },\r\n  {\r\n    title: 'The Dream of a Ridiculous Man',\r\n    author: 'Fyodor Dostoevsky',\r\n    rating: 7.75,\r\n  },\r\n  { title: 'Redder Than Blood', author: 'Tanith Lee', rating: 7.94 },\r\n  { title: 'Enemy of God', author: 'Bernard Cornwell', rating: 8.67 },\r\n];\r\n\r\nconst MIN_RATING = 8;\r\nconst AUTHOR = 'Bernard Cornwell';\r\n\r\nconst topRatedBooks = books21.filter(value => value.rating >= MIN_RATING);\r\nconst booksByAuthor = books21.filter(value => value.author === AUTHOR);\r\n\r\n// console.log(topRatedBooks, booksByAuthor);\r\n\r\n// 22. Metoda filter()\r\nconst getUsersWithEyeColor = (users, color) => {\r\n  const usersEyes = users.filter(user => user.eyeColor === color);\r\n  return usersEyes;\r\n};\r\n\r\n// console.log(getUsersWithEyeColor(users, 'blue'));\r\n\r\n// 23. Metoda filter()\r\nconst getUsersWithAge = (users, minAge, maxAge) => {\r\n  const usersAge = users.filter(({ age }) => age >= minAge && age <= maxAge);\r\n  return usersAge;\r\n};\r\n// console.log(getUsersWithAge(users, 30, 40)); //Moore Hensley, Sharlene Bush, Blackburn Dotson, Sheree Anthony\r\n\r\n// 24. Metoda filter()\r\nconst getUsersWithFriend = (users, friendName) => {\r\n  const friends = users.filter(({ friends }) => friends.includes(friendName));\r\n  return friends;\r\n};\r\n// console.log(getUsersWithFriend(users, 'Goldie Gentry')); //Elma Head i Sheree Anthony\r\n\r\n// 25. Metoda flatMap() filter()\r\nconst getFriends = users => {\r\n  const uniqueFriends = users\r\n    .flatMap(users => users.friends)\r\n    .filter((friends, index, array) => array.indexOf(friends) === index);\r\n  return uniqueFriends;\r\n};\r\n// console.log(getFriends(users));\r\n\r\n// 26. Metoda filter()\r\nconst getActiveUsers = users => {\r\n  const activeUsers = users.filter(({ isActive }) => isActive === true);\r\n  return activeUsers;\r\n};\r\n// console.log(getActiveUsers(users));\r\n\r\n// 27. Metoda filter()\r\nconst getInactiveUsers = users => {\r\n  const inactiveUsers = users.filter(({ isActive }) => isActive === false);\r\n  return inactiveUsers;\r\n};\r\n// console.log(getInactiveUsers(users));\r\n\r\n// 28. Metoda find()\r\nconst books28 = [\r\n  {\r\n    title: 'The Last Kingdom',\r\n    author: 'Bernard Cornwell',\r\n    rating: 8.38,\r\n  },\r\n  {\r\n    title: 'Beside Still Waters',\r\n    author: 'Robert Sheckley',\r\n    rating: 8.51,\r\n  },\r\n  {\r\n    title: 'The Dream of a Ridiculous Man',\r\n    author: 'Fyodor Dostoevsky',\r\n    rating: 7.75,\r\n  },\r\n  { title: 'Redder Than Blood', author: 'Tanith Lee', rating: 7.94 },\r\n];\r\nconst BOOK_TITLE = 'The Dream of a Ridiculous Man';\r\nconst AUTHOR28 = 'Robert Sheckley';\r\n\r\nconst bookWithTitle = books28.find(({ title }) => title === BOOK_TITLE);\r\nconst bookByAuthor = books28.find(book => book.author === AUTHOR28);\r\n// console.log(bookWithTitle, bookByAuthor);\r\n\r\n// 29. Metoda find()\r\nconst getUserWithEmail = (users, email) => {\r\n  const userEmail = users.find(user => user.email === email);\r\n  return userEmail;\r\n};\r\n// console.log(getUserWithEmail(users, 'shereeanthony@kog.com'));\r\n\r\n// 30. Metoda every()\r\n// const firstArray = [26, 94, 36, 18];\r\n// const secondArray = [17, 61, 23];\r\n// const thirdArray = [17, 26, 94, 61, 36, 23, 18];\r\n\r\n// const eachElementInFirstIsEven = firstArray.every(value => value % 2 === 0);\r\n// const eachElementInFirstIsOdd = firstArray.every(value => value % 2 !== 0);\r\n\r\n// const eachElementInSecondIsEven = secondArray.every(value => value % 2 === 0);\r\n// const eachElementInSecondIsOdd = secondArray.every(value => value % 2 !== 0);\r\n\r\n// const eachElementInThirdIsEven = thirdArray.every(value => value % 2 === 0);\r\n// const eachElementInThirdIsOdd = thirdArray.every(value => value % 2 !== 0);\r\n\r\n// console.log(\r\n//   eachElementInFirstIsEven,\r\n//   eachElementInFirstIsOdd,\r\n//   eachElementInSecondIsEven,\r\n//   eachElementInSecondIsOdd,\r\n//   eachElementInThirdIsEven,\r\n//   eachElementInThirdIsOdd\r\n// );\r\n\r\n// 31. Metoda every()\r\nconst isEveryUserActive = users => {\r\n  const isAllUsersActive = users.every(user => user.isActive === true);\r\n  return isAllUsersActive;\r\n};\r\n// console.log(isEveryUserActive(users));\r\n\r\n// 32. Metoda some()\r\nconst firstArray = [26, 94, 36, 18];\r\nconst secondArray = [17, 61, 23];\r\nconst thirdArray = [17, 26, 94, 61, 36, 23, 18];\r\n\r\nconst anyElementInFirstIsEven = firstArray.some(value => value % 2 === 0);\r\nconst anyElementInFirstIsOdd = firstArray.some(value => value % 2 !== 0);\r\n\r\nconst anyElementInSecondIsEven = secondArray.some(value => value % 2 === 0);\r\nconst anyElementInSecondIsOdd = secondArray.some(value => value % 2 !== 0);\r\n\r\nconst anyElementInThirdIsEven = thirdArray.some(value => value % 2 === 0);\r\nconst anyElementInThirdIsOdd = thirdArray.some(value => value % 2 !== 0);\r\n\r\n// console.log(\r\n//   anyElementInFirstIsEven,\r\n//   anyElementInFirstIsOdd,\r\n//   anyElementInSecondIsEven,\r\n//   anyElementInSecondIsOdd,\r\n//   anyElementInThirdIsEven,\r\n//   anyElementInThirdIsOdd\r\n// );\r\n\r\n// 33. Metoda some()\r\nconst isOneUserActive = users => {\r\n  const isOneUsersActive = users.some(user => user.isActive === true);\r\n  return isOneUsersActive;\r\n};\r\n// console.log(isOneUserActive(users));\r\n\r\n// 34. Metoda reduce(callback, initialValue) - tablica\r\nconst players = {\r\n  mango: 1270,\r\n  poly: 468,\r\n  ajax: 710,\r\n  kiwi: 244,\r\n};\r\nconst playtimes = Object.values(players); // [1270, 468, 710, 244]\r\n\r\nconst totalPlayTime = playtimes.reduce((previousValue, number) => {\r\n  return previousValue + number;\r\n}, 0);\r\n\r\nconst averagePlayTime = totalPlayTime / playtimes.length;\r\n// console.log(\r\n//   `Table: ${playtimes}\\nTotal play time: ${totalPlayTime}\\nAverage play time: ${averagePlayTime}`\r\n// );\r\n\r\n// 35. Metoda reduce(callback, initialValue) - obiekt\r\nconst players35 = [\r\n  { name: 'Mango', playtime: 1270, gamesPlayed: 4 },\r\n  { name: 'Poly', playtime: 469, gamesPlayed: 2 },\r\n  { name: 'Ajax', playtime: 690, gamesPlayed: 3 },\r\n  { name: 'Kiwi', playtime: 241, gamesPlayed: 1 },\r\n];\r\n\r\nconst totalAveragePlaytimePerGame = players35.reduce(\r\n  (previousValue, player) => {\r\n    return previousValue + player.playtime / player.gamesPlayed;\r\n  },\r\n  0\r\n);\r\n// console.log(totalAveragePlaytimePerGame);\r\n\r\n// 36. Metoda reduce(callback, initialValue) - obiekt\r\nconst calculateTotalBalance = users => {\r\n  return users.reduce((totalBalance, user) => totalBalance + user.balance, 0);\r\n};\r\n// console.log(calculateTotalBalance(users));\r\n\r\n// 37. Metoda reduce(callback, initialValue) - obiekt\r\nconst getTotalFriendCount = users => {\r\n  return users.reduce(\r\n    (totalFriends, user) => totalFriends + user.friends.length,\r\n    0\r\n  );\r\n};\r\n// console.log(getTotalFriendCount(users));\r\n\r\n// 38. Metoda sort()\r\nconst releaseDates = [2016, 1967, 2008, 1984, 1973, 2012, 1997];\r\nconst authors = [\r\n  'Tanith Lee',\r\n  'Bernard Cornwell',\r\n  'Robert Sheckley',\r\n  'Fyodor Dostoevsky',\r\n];\r\nconst ascendingReleaseDates = [...releaseDates].sort();\r\nconst alphabeticalAuthors = [...authors].sort();\r\n// console.log(`${ascendingReleaseDates}\\n${alphabeticalAuthors}`);\r\n\r\n// 39. Metoda sort()\r\nconst releaseDates39 = [2016, 1967, 2008, 1984, 1973, 2012, 1997];\r\n\r\nconst ascendingReleaseDates39 = [...releaseDates39].sort((a, b) => a - b);\r\nconst descendingReleaseDates = [...releaseDates39].sort((a, b) => b - a);\r\n// console.log(`${ascendingReleaseDates39}\\n${descendingReleaseDates}`);\r\n\r\n// 40. Metoda sort()=> a.localeCompare(b));\r\nconst authors40 = [\r\n  'Tanith Lee',\r\n  'Bernard Cornwell',\r\n  'Robert Sheckley',\r\n  'Fyodor Dostoevsky',\r\n  'Howard Lovecraft',\r\n];\r\nconst authorsInAlphabetOrder = [...authors40].sort((a, b) =>\r\n  a.localeCompare(b)\r\n);\r\nconst authorsInReversedOrder = [...authors40].sort((a, b) =>\r\n  b.localeCompare(a)\r\n);\r\n// console.log(`${authorsInAlphabetOrder}\\n${authorsInReversedOrder}`);\r\n\r\n// 41. Metoda sort()obiekt\r\nconst books41 = [\r\n  {\r\n    title: 'The Last Kingdom',\r\n    author: 'Bernard Cornwell',\r\n    rating: 8.38,\r\n  },\r\n  {\r\n    title: 'Beside Still Waters',\r\n    author: 'Robert Sheckley',\r\n    rating: 8.51,\r\n  },\r\n  {\r\n    title: 'The Dream of a Ridiculous Man',\r\n    author: 'Fyodor Dostoevsky',\r\n    rating: 7.75,\r\n  },\r\n  {\r\n    title: 'Redder Than Blood',\r\n    author: 'Tanith Lee',\r\n    rating: 7.94,\r\n  },\r\n  {\r\n    title: 'Enemy of God',\r\n    author: 'Bernard Cornwell',\r\n    rating: 8.67,\r\n  },\r\n];\r\n\r\nconst sortedByAuthorName = [...books41].sort((firstBook, secondBook) =>\r\n  firstBook.author.localeCompare(secondBook.author)\r\n);\r\n\r\nconst sortedByReversedAuthorName = [...books41].sort((firstBook, secondBook) =>\r\n  secondBook.author.localeCompare(firstBook.author)\r\n);\r\n\r\nconst sortedByAscendingRating = [...books41].sort(\r\n  (firstBook, secondBook) => firstBook.rating - secondBook.rating\r\n);\r\n\r\nconst sortedByDescentingRating = [...books41].sort(\r\n  (firstBook, secondBook) => secondBook.rating - firstBook.rating\r\n);\r\n// console.log(sortedByAuthorName);\r\n// console.log(sortedByReversedAuthorName);\r\n\r\n// 42. Metoda sort()obiekt\r\n"],"names":[],"version":3,"file":"index.789541b4.js.map","sourceRoot":"/__parcel_source_root/"}